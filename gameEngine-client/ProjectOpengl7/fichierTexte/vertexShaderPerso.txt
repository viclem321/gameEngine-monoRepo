#version 330 core

layout (location = 0) in vec3 aPos;
layout(location = 1) in vec3 norm;
layout (location = 2) in vec2 aTextCoord;
layout (location = 5) in ivec4 boneIds; 
layout(location = 6) in vec4 weights;
layout (location = 7) in vec4 aColorDiffAmb;
layout (location = 10) in float aUseTexture;


layout (std140) uniform Matrice
{
    mat4 view;
    mat4 projection;
};

uniform mat4 model;
uniform mat4 finalBonesMatrices[100];

out vec2 TextCoord;
out vec4 ColorAmbDiff;
out float UseTexture;





void main()
{
    vec4 totalPosition = vec4(0.0f);
    for(int i = 0 ; i < 4 ; i++)
    {
        if(boneIds[i] == -1) 
            continue;
        if(boneIds[i] >= 100) 
        {
            totalPosition = vec4(aPos,1.0f);
            break;
        }
        vec4 localPosition = finalBonesMatrices[boneIds[i]] * vec4(aPos,1.0f);
        totalPosition += localPosition * weights[i];
        vec3 localNormal = mat3(finalBonesMatrices[boneIds[i]]) * norm;
    }
    gl_Position = projection * view * model * totalPosition;
    TextCoord = aTextCoord;
    ColorAmbDiff = aColorDiffAmb;
    UseTexture = aUseTexture;

}